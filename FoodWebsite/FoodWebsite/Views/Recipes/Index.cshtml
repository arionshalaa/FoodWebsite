@using PaginatedHelper
@model PaginatedList<FoodWebsite.Models.Recipe>


@{
    ViewData["Title"] = "List of all recipes";
}


@if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
{
    <p>
        <a asp-action="Create">Create New</a>
    </p>
}

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input class="btn btn-primary" type="submit" value="Search" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.First().PhotoURL)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Recipe Name</a>
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().RecipeDescription)
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Rating</a>
            </th>




        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="align-middle">
                    <img class="rounded-circle" src="@item.PhotoURL" alt="@item.RecipeName" style="max-width: 150px" />
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.RecipeName)
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.RecipeDescription)
                </td>
                <td class="align-middle">
                    @Html.DisplayFor(modelItem => item.Rating)
                </td>
                @if (User.Identity.IsAuthenticated && User.IsInRole("Admin"))
                {
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    </td>
                }

            </tr>
        }
    </tbody>
</table>



@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
</div>